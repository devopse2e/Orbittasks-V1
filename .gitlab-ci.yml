workflow:
  name: TodoApp Deployment
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

variables:
  GIT_STRATEGY: fetch
  GIT_CLEAN_FLAGS: -ffdx -e !.gitignore
  NODE_VERSION: "18"
  NPM_CONFIG_CACHE: "/tmp/npm-cache"
  # Docker-specific global variables (non-sensitive)
  FRONTEND_IMAGE: $DOCKERHUB_USER/todo-app-frontend
  FRONTEND_TESTIMAGE: $DOCKERHUB_USER/todo-frontend-test
  BACKEND_IMAGE: $DOCKERHUB_USER/todo-app-backend
  BACKEND_TESTIMAGE: $DOCKERHUB_USER/todo-backend-test
  TAG: $CI_COMMIT_SHORT_SHA  # Tags with commit SHA for traceability;test alternative: $CI_PIPELINE_ID
  K8S_CONTEXT: kubernetes-the-hard-way
  K8S_NAMESPACE: todo-app
  K8S_MANIFEST_DIR: k8s/
  FULL_CONTEXT: "$CI_PROJECT_PATH:$K8S_CONTEXT" 

stages:
  - .pre
  - build
  - test
  - docker-build
  - docker-test
  - docker-push
  - deploy



#Cache template for reusability
.node_cache_template: &node_cache
  cache:
    key: ${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push

generate-env:
  stage: .pre  # Early stage
  tags:
    - macos
    - shell
  script:
    - echo -e "$ENV_FILE" > .env
  artifacts:
    paths:
      - .env
    expire_in: 1 week

before_script:
  #- apk add --no-cache bash curl git
  - rm -rf .tmp/ || true  # Target the problematic .tmp dir
  - rm -rf backend/node_modules frontend/node_modules || true
  - rm -rf frontend/dist || true
  - sleep 10
  - npm config set cache ${NPM_CONFIG_CACHE} --global
  - rm -rf $CI_PROJECT_DIR/*.tmp/ || true  # Safely remove temp dirs
build-frontend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  resource_group: build
  tags:
    - macos
    - shell
  script: 
    - cd frontend
    - export $(cat .env | xargs)
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run build
    - echo "Frontend build completed successfully"
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - frontend/dist/
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull-push
  needs:
    - generate-env 
  dependencies:
    - generate-env
  
build-backend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  resource_group: build
  tags:
    - macos
    - shell
  before_script:
    - rm -rf frontend/ backend/node_modules || true  
  script: 
    - cd backend
    - export $(cat .env | xargs)
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - echo "Backend dependencies installed successfully"
    # Add any backend build steps if needed
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - backend/
    exclude:
      - backend/node_modules/
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull
  needs:
    - generate-env 
    - build-frontend
  dependencies:
    - generate-env
  retry: 2


test-frontend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  script:
    - cd frontend
    - export $(cat .env | xargs)
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
      - frontend/coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
  cache:
    key: frontend-${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  needs:
    - generate-env 
    - build-frontend
  dependencies:
    - build-frontend
    - generate-env
  retry: 2

test-backend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  tags:
    - macos
    - shell
  script:
    - cd backend
    - export $(cat .env | xargs)
    - npm ci --cache ${NPM_CONFIG_CACHE}
    - npm run test:ci 
    - sleep 20
  artifacts:
    when: always
    expire_in: "1 week"
    paths:
    - backend/junit.xml
    - backend/coverage/
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
  cache:
    key: backend-${CI_COMMIT_REF_SLUG}
    paths:
      - backend/node_modules/
    policy: pull
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  needs:
    - build-backend
    - generate-env 
  dependencies:
    - build-backend
    - generate-env 
  retry: 2

docker-build-frontend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - export $(cat .env | xargs) 
    - docker build -t $FRONTEND_IMAGE:$TAG --target production --build-arg REACT_APP_API_URL=$REACT_APP_API_URL frontend/ || { echo "Frontend build failed"; exit 1; }  # Build with SHA tag; added error handling
    - docker build -t $FRONTEND_TESTIMAGE:$TAG --target test --build-arg REACT_APP_API_URL=$REACT_APP_API_URL frontend/ || { echo "Frontend build failed"; exit 1; }
    - if [ "$CI_COMMIT_BRANCH" == "main" ] || [[ "$CI_COMMIT_BRANCH" =~ ^feature(-.*)?$ ]]; then docker tag $FRONTEND_IMAGE:$TAG $FRONTEND_IMAGE:latest; fi 
  needs:
    - build-frontend
    - generate-env 
  dependencies:
    - build-frontend
    - generate-env 
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'

docker-build-backend:
  stage: docker-build
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - export $(cat .env | xargs) 
    - docker build -t $BACKEND_IMAGE:$TAG --target production backend/ || { echo "Backend build failed"; exit 1; }  
    - docker build -t $BACKEND_TESTIMAGE:$TAG --target test backend/ || { echo "Backend build failed"; exit 1; }
    - if [ "$CI_COMMIT_BRANCH" == "main" ] || [[ "$CI_COMMIT_BRANCH" =~ ^feature(-.*)?$ ]]; then docker tag $BACKEND_IMAGE:$TAG $BACKEND_IMAGE:latest; fi 
  needs:
    - build-backend
    - generate-env 
  dependencies:
    - build-backend
    - generate-env 
  retry: 2
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'

docker-test-backend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - echo "------Starting Docker Backend Tests ------"
    - export $(cat .env | xargs)
    - docker run --rm --env-file=.env $BACKEND_TESTIMAGE:$TAG
    - docker network create todo-network
    - docker run -d --name todo-mongo --network todo-network -p 27017:27017 mongo:latest
    - docker run -d --name todo-backend --network todo-network -p 3001:3001  --env-file=.env $BACKEND_IMAGE:$TAG 
    - sleep 10
    - curl -f http://localhost:3001/health || exit 1
    - docker image rm $BACKEND_TESTIMAGE:$TAG
    - echo "------Docker Backend Tests Completed------"
  needs:
    - docker-build-backend
    - test-backend
    - generate-env 
  dependencies:
    - docker-build-backend
    - generate-env 
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'

docker-test-frontend:
  stage: docker-test
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - echo "------Starting Docker Frontend Tests ------"
    - export $(cat .env | xargs)
    - docker run --rm $FRONTEND_TESTIMAGE:$TAG 
    - docker run -d --name todo-frontend --network todo-network --env-file=.env -p 8080:80 $FRONTEND_IMAGE:$TAG
    - sleep 10
    - curl -f http://localhost:8080 || exit 1 
    - docker stop todo-backend && docker rm -f todo-backend
    - docker stop todo-frontend  && docker rm -f todo-frontend
    - docker rm -f todo-mongo
    - docker network rm todo-network
    - docker image rm $FRONTEND_TESTIMAGE:$TAG
    - echo "------Docker Frontend Tests Completed------"
  needs:
    - docker-build-frontend
    - test-frontend
    - docker-test-backend
    - generate-env 
  dependencies:
    - docker-build-frontend
    - generate-env 
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'
  retry: 2



docker-push-frontend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker push $FRONTEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ] || [[ "$CI_COMMIT_BRANCH" =~ ^feature(-.*)?$ ]]; then docker push $FRONTEND_IMAGE:latest; fi  
  needs:
    - docker-test-frontend  
  dependencies:
    - docker-test-frontend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'
  retry: 2

docker-push-backend:
  stage: docker-push
  tags:
    - macos
    - shell
  before_script:
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
  script:
    - docker push $BACKEND_IMAGE:$TAG || exit 1
    - if [ "$CI_COMMIT_BRANCH" == "main" ] || [[ "$CI_COMMIT_BRANCH" =~ ^feature(-.*)?$ ]]; then docker push $BACKEND_IMAGE:latest; fi
  needs:
    - docker-test-backend
  dependencies:
    - docker-test-backend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature(-.*)?$/'
  retry: 2

deploy-k8s:
  stage: deploy
  image: bitnami/kubectl:latest   # Use a Helm image for installation
  tags:
    - macos
    - shell
  before_script:
    - apk update && apk add --no-cache bash curl  # Install kubectl and dependencies
  script:
    - echo "Setting up kubeconfig"
    - mkdir -p ~/.kube
    - echo "$KUBECONFIG_CONTENT"
    - echo "$KUBECONFIG_CONTENT" | base64 -d > ~/.kube/config || { echo "Decoding failed"; exit 1; }  # Add error handling
    - kubectl config view  # Debug: Output the full config for logs
    - kubectl config get-contexts  # Debug: List available contexts
    - kubectl config use-context $FULL_CONTEXT || { echo "Context not found"; exit 1; }  # Hardcode for testing; replace with $K8S_CONTEXT later
    - echo "Installing/Upgrading NGINX Ingress Controller with webhook disabled"
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo update
    - helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.admissionWebhooks.enabled=false || { echo "Helm upgrade failed"; exit 1; }  # Disable webhook
    - echo "Deploying app manifests"
    - kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - kubectl apply -f $K8S_MANIFEST_DIR 
    - kubectl rollout status deployment/frontend-deployment --namespace $K8S_NAMESPACE --timeout=4m
    - kubectl rollout status deployment/backend-deployment --namespace $K8S_NAMESPACE --timeout=4m
  needs:
    - docker-push-frontend
    - docker-push-backend
  only:
    - main
  environment:
    name: development
    url: http://todo-app.local
  #rules:
   # - when: never